---
title: "Singapore_GE_2025_Party_Manifestos"
date: 2025-04-21T23:45:15+08:00
draft: false
tags: ["blog","quote"]
---

# Decoding GE2025 Manifestos: My AI-Powered Mindmap App Journey

As Singapore gears up for the 2025 General Election, diving into party manifestos is crucial for informed voting. But let's be honest, they can be lengthy and dense! I wanted a better, more visual way to digest and compare the different platforms. This led me down a path to build a simple web application, with a couple of key goals in mind.

## Aim 1: Becoming a More Involved Citizen

My primary drive for this project was personal civic engagement. I wanted to create a tool that would force *me* to actively engage with the content of the manifestos, break them down, and understand the core proposals from each party. Presenting them visually in a mindmap format seemed like the perfect way to see connections, priorities, and differences at a glance, making the information much more accessible than reading linear documents.

## Aim 2: Testing AI-Generated App Capabilities

Beyond civic duty, I'm fascinated by the potential of AI in accelerating development. I saw this project as a fantastic opportunity to test how effectively current AI tools could help generate the basic structure and code for a simple web application. Could I really go from concept to a working prototype with significant AI assistance?

## The Toolchain: My AI-Assisted Workflow

Bringing this idea to life involved a few interesting steps, heavily leveraging AI:

1.  **Content Gathering and Summarization with NotebookLM:**
    The first hurdle was processing the manifesto content itself (or anticipating the kind of content that will be released closer to the election). I used **NotebookLM** to ingest potential source documents, asking it to identify key policies, summarise core themes, and pull out bullet points for each party. This step was invaluable for distilling large amounts of text into manageable chunks ready for visualisation.

2.  **Generating the Base App with Gemini 2.5 Canvas:**
    With the content summarised, I needed the application's structure. This is where **Gemini 2.5 Canvas** came in. I described the desired outcome â€“ a web interface capable of displaying interconnected nodes of information, like a mindmap, populated with text. Canvas was surprisingly effective at generating the foundational HTML, CSS, and JavaScript needed to create a basic interactive structure that could potentially host the manifesto data. It gave me a significant head start compared to coding from scratch.

3.  **Iteration and Refinement in Firebase Studio:**
    Taking the base code generated by Gemini 2.5, I brought the project into **Firebase Studio**. This environment was perfect for the crucial next steps: integrating the summarised manifesto data, refining the user interface, tweaking the mindmap visualisation library (which I had to manually add and configure), and setting up hosting. Firebase provided the tools needed to iterate quickly, test changes in real-time, and prepare for deployment.

## What's Next?

This project is still evolving, but the process has been incredibly rewarding. It's proving to be a useful personal tool for understanding the political landscape better, and it's been an eye-opener regarding the potential of AI tools in accelerating development, even for relatively simple applications.

Link to Webapp: 